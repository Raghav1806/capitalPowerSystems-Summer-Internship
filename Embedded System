Embedded System : Embedded Software + Embedded Hardware

Normally, an embedded system is composed of following:
(1) An embedded microcontroller.
(2) A programming/debugging interface for microcontroller.
(3) Microcontroller support circuitry.
(4) Application specific circuitry.

Computer System with a dedicated function within a larger mechanical or electrical system.

Common properties of Embedded System :
(1) Low power consumption.
(2) Small size.
(3) Rugged operating ranges.
(4) Low per-unit cost.

Peripherals :
Embedded systems talk with the outside world via peripherals such as:
(1) Serial Communication Interfaces (SCI) - RS-232, RS-422 etc.
(2) Synchronous Serial Communication Interface - I2C, SPI etc.
(3) Universal Serial Bus
(4) Multi Media Cards - SD cards, Compact Flash, etc.
(5) Networks - Ethernet, etc.
(6) Fieldbuses
(7) Timers - PLL(s), Capture/Compare and Time Processing Units.
(8) Discrete IO - General Purpose Input/Output (GPIO).
(9) ADC/DAC.
(10) Debugging - JTAG Port - Joint Test Action Group.

Embedded Debugging :
- Different metrics that characterize the form of embedded debugging required are:
(1) Does it slows down the main application?
(2) How close is the debugged system or application to the actual system or application.
(3) How impressive are triggers which are set for debugging.
(4) What can be inspected in the debugging process.

- Types of debugging :
(1) Interactive resident debugging, using simple shell provided by embedded operating system.
(2) External debugging using logging or serial port output to trace operation.
(3) In-Circuit Debugger (ICD) : a hardware device that connects to the microprocessor via JTAG. This allows the operation of the microcontroller to be controlled externally, typically restricted to specific debugging capabilities in the processor.
(4) In-Circuit Emulator (ICE) : replaces microprocessor with a simulated equivalent, providing full control over all aspects of the microprocessor.
(5) Complete Emulator : provides a simulation of all aspects of hardware, allowing all of it to be controlled and modified.

-> WatchDog Timer:
It is an electronic timer that is used to detect and recover from computer malfunctions. During normal operation, the computer regularly resets the watch dog timer to prevent it from elapsing, or "Timing Out". If, due to a hardware fault or program error, the coputer fails to reset the watch dog, the timer will elapse and generate a time out signal. The time out action is used to initiate corrective actions.

Watch dog timers are commonly found in embedded systems and other computer controlled equipment where humans cannot easily access the equipment or would be unable to react to faults in a timely manner.

Embedded Software:
It is a computer software, written to control machines or devices that are not typically thought of as computers.

Communication Protocols:
- Direct memory addressing, I2C, SPI, Serial Ports, USB.

Interrupt:
Signal to the processor emitted by hardware or software indicating an event that needs immediate attention. The processor responds by suspending its current activities, saving its state, and executing a function called interrupt handler (or an interrupt service routine) to deal with the event.

Two major types of interrupts:
(1) Hardware Interrupts: Used by devices to communicate that hey require attention fro the operating system.These interrupts are asynchronous and can occur in middle of instruction execution. The act of initiating a hardware interrupt is referred as an interrupt request (IRQ). 
(2) Software Interrupts: Caused either by an exceptional condition in the processor itself, or a special instruction in the instruction set which causes an interrupt when it is executed.

Each interrupt has its own interrupt handler. The number of hardware interrupts is limited by the number of interrupt request (IRQ) lines to the processor, but there may be hundreds of different software interrupts.

Interrupts can be categorized into these different types:
(1) Maskable Interrupt: A hardware interrupt that may be ignored by setting a bit in an interrupt mask register's bit mask.
(2) Non Maskable Interrupt: A hardware interrupt that lacks an associated bit mask, so that it can never be ignored. It is used for highest priority tasks such as timers (watch dog timers).
(3) Inter Processor Interrupt (IPI): A special case of interrupt that is generated by one processor to interrupt another processor in a multi-processor system.
(4) Software Interrupt.
(5) Spurious Interrupt: A hardware interrupt that is unwanted. 

Polling (Polled Operation):
- Actively sampling the status of an external device by a client program as a synchronous activity.
- Computer or controlling device waits for an external device to check its readiness or state, often with low level hardware.
(1) The host repeatedly reads the busy bit of the controller until it becomes clear.
(2) When clear, the host writes in the command register and writes a byte into the data-out register.
(3) The host sets the command ready bit.
(4) When the controller senses command-ready bit is set, it sets busy bit.
(5) The controller reads the command register and since write bit is set, it performs necessary I/O operations on the device. If the read bit is set to one instead of write bit, data from device is loaded into data-in register, which is further read by the host.
(6) The controller clears the command-ready bit once everything is over, it clears error bit to show successful operation and reset busy bit (0).

Embedded Software Architectures:
(1) Simple control loop: A loop calls subroutines, each of which manages a part of the hardware or software.
(2) Interrupt controlled system: Tasks performed by the system are triggered by different kinds of events. For example, interrupts could be generated by a timer in a predefined frequency, or by a serial port controller receiving a bite.
(3) Cooperative multitasking.
(4) Preemptive multitasking or multi threading.
(5) MicroKernels and ExoKernels.
(6) Monolithic kernels. 






















